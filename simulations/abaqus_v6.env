#=====================================================================================
# This Abaqus configuration file is provided as part of the source code for the
# simulations. It is likely that you will have to adapt it to your own system, or
# update your own environment file and delete/rename this one.
# The key change compared to the defaults is that we included the Intel MKL library
# in the compile_fortran command.
#=====================================================================================

#-*- mode: python -*-


import os, re, glob, driverUtils

# Location of the /include directory in the ABAQUS installation
abaHomeInc = os.path.abspath(os.path.join(os.environ.get('ABA_HOME', ''), os.pardir))

# Avoid signal trapping by the Fortran RTE
os.environ["FOR_IGNORE_EXCEPTIONS"] = "1"
# Disable messages from the Fotran RTE
os.environ["FOR_DISABLE_STACK_TRACE"] = "1"

# Do not let QLogic InfiniPath driver set processor affinity.
os.environ["IPATH_NO_CPUAFFINITY"] = "1"

# Avoid CAE display issues due to compositing window animations
if 'XLIB_SKIP_ARGB_VISUALS' not in os.environ:
    os.environ['XLIB_SKIP_ARGB_VISUALS'] = '1'

# Normal install parameters - this section is OK to customize if necessary
fortCmd = "/opt/intel/oneapi/compiler/latest/linux/bin/intel64/ifort"   # <-- Fortran compiler
cppCmd  = "/opt/intel/oneapi/compiler/latest/linux/bin/intel64/icc"     # <-- C++ compiler


## Fortran compile command for User Subroutines
compile_fortran = [fortCmd,
        # free form syntax enabled
        '-free',
        # use Intel mkl
        '-qmkl',
        # allocate arrays larger than X on the heap.
        # !!! This option is highly discouraged... !!!
        # '-heap_arrays:1',
        # will use "old", i.e. pre-2008 standard: left hand side is assumed to be already allocated in array assignments
        '-nostandard-realloc-lhs',
        # display compiler version info
        '-V',
        # do not link the object file into an executable
        '-c',
        # use the fpp preprocessor on the source code
        '-fpp',
        # generate position-independent code
        '-fPIC',
        # set the line length for fixed-format source files
        '-extend-source',
        # define symbols used by Abaqus code (propably to specify on what system the code will run)
        '-DABQ_LNX86_64',
        '-DABQ_FORTRAN',
        # Important for thread-safety of parallel user subroutines.
        # All local, non-saved variables are allocated on run-time stack
        '-auto',
        # set FPU precision to 53 bit significand
        '-pc64',
        # align arrays in memory with 64byte boundaries for more efficient access (but possibly increased memory usage)
        '-align', 'array64byte',
        # improve precision of FP divides and sqrt
        '-prec-div', '-prec-sqrt',
        # floating point model: precise
        '-fp-model', 'precise',
        # math library consistent results
        '-fimf-arch-consistency=true',
        # Abaqus-specific option, probably specific to ifort version
        '-mP2OPT_hpo_vec_divbyzero=F',
        # disable floating point fused multiply-add
        '-no-fma',
        # floating point speculations only when safe
        '-fp-speculation=safe',
        # honor parenthesis during expression evaluation
        '-fprotect-parens',
        # enable stack overflow protection checks
        '-fstack-protector-strong',
        # important for thread-safety, asyncronous I/O
        '-reentrancy', 'threaded',
        # automatically initialize all arrays to zero
        #'-init=zero','-init=arrays',
        # automatically initialize all arrays to SNAN
        #'-init=snan', '-init=arrays',
        # code path for all processors supporting sse3 instructions (fallback if no specialization applies)
        '-msse3',
        # code path for intel processors:
        # axcore-avx2: Skylake, Broadwell, Haswell
        # avx: Sandybridge
        # my T490 has a Skylake CPU...
        '-axcore-avx2,avx',
        # Warning for compile-time bounds checks
        '-WB',
        # include files from directory %I (whatever that is)
        '-I%I',
        # include files from the abaqus home directory
        '-I'+abaHomeInc,
        # ??
        '%P']

# Additional command-line options for the Intel C/C++ Compilers:
# '-cxxlib', '-Kc++eh', '-Krtti', '-Kc++', '-pc64', '-restrict', '-shared-intel',
# '-we1011', '-we120',  '-we117', '-we556', '-we144', '-we268', '-we1224', '-we167', '-we880'
compile_cpp = [cppCmd,
           '-c', '-fPIC', '-w', '-Wno-deprecated', '-DTYPENAME=typename',
           '-D_LINUX_SOURCE', '-DABQ_LINUX', '-DABQ_LNX86_64', '-DSMA_GNUC',
           '-DFOR_TRAIL', '-DHAS_BOOL', '-DASSERT_ENABLED',
           '-D_BSD_TYPES', '-D_BSD_SOURCE', '-D_GNU_SOURCE',
           '-D_POSIX_SOURCE', '-D_XOPEN_SOURCE_EXTENDED', '-D_XOPEN_SOURCE',
           '-DHAVE_OPENGL', '-DHKS_OPEN_GL',  '-DGL_GLEXT_PROTOTYPES',
           '-DMULTI_THREADING_ENABLED', '-D_REENTRANT',
           '-DABQ_MPI_SUPPORT', '-DBIT64', '-D_LARGEFILE64_SOURCE', '-D_FILE_OFFSET_BITS=64', '%P',
           # '-O0', # <-- Optimization level
           # '-g',  # <-- Debug symbols
           '-I%I', '-I'+abaHomeInc]

compile_fmu = [cppCmd,
           '-c', '-fPIC','-I%I', '-I'+abaHomeInc]

link_fmu = [cppCmd,
        '-fPIC', '-shared', '-o', '%J', '%M']

link_sl = [fortCmd,
	# free form syntax
	'-free',
        # print compiler info
        '-V',
        # also link cxx libraries if necessary
        '-cxxlib',
        # generate position-independent code
        '-fPIC',
        # search for unresolved references in multithreaded libraries
        '-threads',
        # build dynamic shared object instead of executable
        '-shared',
        # Wl: pass option to linker
        # --copy-dt-needed-entries: replacement for deprecated --add-needed
        # makes sure dependencies of dynamic libraries are resolved recursively (or something like that)
        '-Wl,--copy-dt-needed-entries',
        # ??
        '%E',
        # Wl: pass option to linker
        # -soname: give the shared library a name that will be used in dynamic linking at runtime instead of the file name
        '-Wl,-soname,%U',
        # set the output file as %U
        '-o', '%U',
        #
        '%F', '%A', '%L', '%B',
        #
        '-parallel',
        # Linker option -Bdynamic adds dynamic linking for libraries follwing it
        # (this should be the default anyways though...)
        # if no libraries follow this it propably does nothing at all...
        '-Wl,-Bdynamic',
        #
        '-shared-intel']

#-Wl,--copy-dt-needed-entries future replacement for -Wl,--add-needed
link_exe = [cppCmd,
        '-fPIC',
        '-Wl,-Bdynamic', '-Wl,--add-needed', '-o', '%J', '%F', '%M', '%L', '%B', '%O']

# load shared subroutine library from current directory
# explicitly specified user subroutine files overwrite subroutines from the library
# usub_lib_dir=os.getcwd()

# Remove the temporary names from the namespace
del cppCmd
del fortCmd
del abaHomeInc


